\title{Error Number FFI Handling}

\chapter{Introduction}%
This library provides a Chez Scheme specific means for getting the current errno value. 
It also provides some safety conveniences for doing so, to ensure that the [[errno]] value 
does not accidently change in the midst of the call. 

This is a Chez Scheme specific library, and it is expected that other systems should have 
their own way of accomplishing this. 

\chapter{Implementation}%
To make this work, I use some rather dangerous Chez Scheme hackery, so you should 
beware!

<<Code>>=
(define errno
  (let ([errno-ent (#%$foreign-entry "errno")])
    (lambda ()
      (#%$object-ref 'integer-32 errno-ent 0))))

(define errno-message
  (let ([$strerror (foreign-procedure "strerror" (fixnum) string)])
    (lambda (num) ($strerror num))))

(define (call-with-errno thunk receiver)
  (call-with-values
    (lambda () (critical-section (let ([v (thunk)]) (values v (errno)))))
    receiver))
@

\chapter{Modules, Libraries, &c.}

<<errno.sls>>=
#!chezscheme
(library (arcfide errno)
  (export errno errno-message call-with-errno)
  (import (chezscheme))

<<Code>>

)
@

<<errno.ss>>=
(module arcfide-errno
  (errno errno-message call-with-errno)
  (import (chezscheme))

<<Code>>

)
@

<<errno.scm>>=
<<Code>>
@
