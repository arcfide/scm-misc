\title{Mod\_lisp for Scheme}

\chapter{Overview}%
The following library hopes to become the de facto standard mod\_lisp
library for Scheme programs. It aims for the following goals:

\unorderedlist
\li Portability
\li Functionality and Generatlity
\li Efficiency
\li Freedom of Use and License
\endunorderedlist

This project came about after the author became dissatisfied with the 
existing implementation available in MIT Scheme, and wanted something 
more flexible that didn't have as much of a hackish feel.

\section{Portability}%
This library tries to make sure that each part is easily exchanged with another. 
It may not happen this way, but this goal will eventually be achieved.

\section{Functionality and Generality}%
People should not have to avoid using something like mod\_lisp because of a 
lack of features. Specifically, there was no POST support in the old MIT 
Scheme library.

\section{Efficiency}%
This library aims to be useful by maintaining a low memory footprint 
where it makes sense, using functional and referentially transparent algorithms 
where possible, and encouraging clean approaches.

\section{Freedom of Use}%
This code is licensed under the ISC license for maximum usability in both 
free and commercial software.

\chapter{Structure of mod\_lisp requests}%
Mod\_lisp requests and responses have the same format: a set of key value 
lines ending with [[end\n]] and followed by the body contents. The pairs 
consist of two lines each, where the first line contains the key, and the second 
line the value.

The process of a mod\_lisp server is to accept a request, send a response, 
and repeat. There are two means of doing so. The server may handle each 
request in a single socket, using the [[keep-alive]] parameter to multiplex 
requests, or it may accept a new socket each time and dispatch. 

This library supports both of these methods, since some implementations may 
not supports multiple threads which make it easy to handle the latter method. 

\chapter{The Request/Response Record}%
Both requests and response have a similar format, consisting of a set of 
key/value pairs (symbol and string, respectively), and a body. These are 
called packets.

<<Imports>>=
(rnrs base)
(rnrs records syntactic)
@

<<Exports>>=
make-modlisp-packet modlisp-packet-headers modlisp-packet-contents
@

<<Datatypes>>=
(define-record-type modlisp-packet (fields headers contents))
@

\section{Input/Ouput of Packets}%
The following procedures read and write packets to a given port.

<<Imports>>=
(rnrs io ports)
(rnrs unicode)
(rnrs control)
(riastradh foof-loop)
@

<<Packet I/O>>=
(define (put-packet packet port)
  (for-each 
    (lambda (x) 
      (put-datum port (car x))
      (put-char port #\newline)
      (put-string port (cdr x))
      (put-char port #\newline))
    (modlisp-packet-headers packet))
  (when (keep-alive?)
    (put-string port "Keep-Socket\n1\n"))
  (put-string port "Content-Length\n")
  (put-string port (number->string (string-length (modlisp-packet-contents packet))))
  (put-char port #\newline)
  (put-string port "end\n")
  (put-string port (modlisp-packet-contents packet))
  (flush-output-port port))

<<Header Processing>>

<<Content Processing>>

(define (get-packet port)
  (call-with-current-continuation
    (lambda (return)
      (define (return-on-disconnect x)
        (if (eof-object? x) (return #f) x))
      (define (get-header)
        (let ([key (return-on-disconnect (get-line port))])
          (and (not (string=? "end" key))
            (cons (string->symbol (string-downcase key))
              (return-on-disconnect (get-line port))))))
      (loop (
          [with header (get-header) (get-header)]
          [for headers (listing (process-header header))]
          [while header])
        => (make-modlisp-packet headers
            (let ([len (assq 'content-length headers)])
              (and len 
                (process-contents headers 
                  (return-on-disconnect 
                    (get-string-n port (string->number (cdr len))))))))))))
@

\chapter{Processing Headers}%
At the moment, we just handle unquoting the urls. Otherwise, there 
may be some more things that we could do.

{\it XXX: We may want to do some kind of handler based processing 
here for customization of mod\_lisp.}

<<Imports>>=
(rnrs lists)
(rnrs mutable-pairs)
(riastradh schemantic-web uri)
@

<<Header Processing>>=
(define (parse-content-type buf)
  (parse-string mime-parser:content-value buf #f
    (lambda (res con s) res)
    (lambda (err con s)
      (error 'parse-content-type
        "Failed to parse content-type header"
        (parse-error/position err)
        (parse-error/messages err)))))

(define (process-header header)
  (case (car header)
    [(url) (cons 'url (string->uri (cdr header)))]
    [(content-type) (cons 'content-type (parse-content-type (cdr header)))]
    [else header]))
@

\chapter{Processing Contents}%
There are normally three different things that can happen with parameters 
or data submitted to the server. Either it was submitted as part of the URL 
in a GET request, in which case it will show up as part of the headers 
and the contents will be false, or it was submitted as a POST request and 
will be contained in the body. 

When it is in the body, it could come in any number of forms, the two 
most common of which are [[multipart/form-data]] and 
[[application/x-www-form-urlencoded]]. These two should be parsed differently, 
so we use the MIME parsing utilities to parse the body. There is already a 
default parser for multipart bodies so we just need to define a parser for the 
URL encoded post messages.

<<Imports>>=
(riastradh parscheme)
(arcfide mime)
@

<<Content Processing>>=
(define (process-contents headers contents)
  (parse-string (mime-parser:contents headers) (string-append "\r\n" contents) #f
    (lambda (res c s) res)
    (lambda (err c s)
      (error 'process-contents "Failed to parse contents" 
        headers contents 
        (parse-error/position err) 
        (parse-error/messages err)))))

@

To parse [[application/x-www-form-urlencoded]] we use my modification of 
Oleg's [[cgi:url-unquote]] 
to handle the url-parameters. 

<<MIME Registration>>=
(register-mime-type-converter! 'application 'x-www-form-urlencoded
  (lambda (data params) (query-string->parameters data)))
@

\chapter{Serving Requests}%
Serving requests consists of reading in a request, applying the right handler 
to the request object, and then writing out the packet that is returned by 
the handler. 

<<Serving Requests>>=
<<Handlers>>

(define (serve-request in out)
  (define empty-uri (string->uri ""))
  (define (packet-url p) (uri->string (get-modlisp-header p 'url empty-uri)))
  (define (get-response url p) 
    (if url ((lookup-request-handler url) p) (make-500-response)))
  (let ([incoming (get-packet in)])
    (and incoming
      (begin 
        (put-packet (get-response (packet-url incoming) incoming) out)
        #t))))
@

\chapter{Request Handlers}%
Request handlers are unary procedures that are applied to an incoming 
request and are expected to return a packet that responds to the incoming 
packet. 

<<Imports>>=
(foof irregex)
(only (scheme) make-parameter)
@

<<Exports>>=
handle-404 register-request-handler!
@

<<Handlers>>=
(define (handle-404 incoming)
  (define contents 
"<html><head><title>404 Resource not found</title></head>
<body><h1>404</h1><h2>Resource not found</h2>
<p>Unable to find the resource. Please check the URL.</p></body></html>")
  (make-modlisp-packet
    `((status . "200 OK")
      (content-type . "text/html"))
    contents))

(define request-handlers
  (make-parameter `((,(irregex ".*") . ,handle-404))))

(define (register-request-handler! match proc)
  (request-handlers
    (cons (cons (irregex match) proc) 
      (request-handlers))))

@

Handlers are associated with a given regular expression, which is 
compared against the URL in order to grab a given handler.

<<Handlers>>=
(define (lookup-request-handler url)
  (let ([res (find (lambda (x) (irregex-match (car x) url)) (request-handlers))])
    (if res (cdr res)
      (error 'lookup-request-handler "Failed to find handler!" 
        url (request-handlers)))))
@

\chapter{Server Application}%
The following allows you to start a server that performs a read-handle-write 
loop on the socket. Two types of servers are supported, a multiplexing 
server, which does everything on a single sockets, and a threaded server, 
which spawns a new thread for each connection.

<<Imports>>=
(arcfide sockets)
(arcfide sockets socket-ports)
(only (scheme) meta-cond machine-type import)
@

<<Exports>>=
start-modlisp-server modlisp-transcoder
@

<<Server>>=
<<Packet I/O>>

<<Serving Requests>>

(define keep-alive? (make-parameter #t))
(define modlisp-transcoder (make-transcoder (latin-1-codec) (eol-style none)))

(import (only (chezscheme) fork-thread))

(define (start-modlisp-server port)
  (let ([s (create-socket socket-domain/internet socket-type/stream socket-protocol/auto)])
    (bind-socket s 
      (make-internet-address (string->ipv4 "127.0.0.1") port))
    (listen-socket s (socket-maximum-connections))
    (set-socket-nonblocking! s #f)
    (loop ()
      (let-values ([(sock addr) (accept-socket s)])
        (let-values ([(in out) (socket->port sock (buffer-mode block) modlisp-transcoder)])
          (fork-thread (lambda () (loop ([while (serve-request in out)])))))))))
@

\chapter{Utilities and Helpers}%
Constructing request handlers ought not to overly burden the developer. The 
following help to ease any burden the programmer may encounter when using 
this library.

\procsig{[[modlisp-plain-matcher]]}{\var{url}}{\var{URL Regex String}}

<<Exports>>=
modlisp-subtree-matcher
@

\noindent This procedure takes a url which is meant to be matched against 
the root of an incoming url and sets it so that it will match any subtree 
of the url as well as the URL itself. It also makes sure that it will ignore 
any parameters passed in the URL.

<<Utilities>>=
(define (modlisp-subtree-matcher url)
  (string-append url ".*"))

@

\procsig{[[get-modlisp-header]]}{\var{packet} \var{key} [\var{default}]}{\var{header or default}}

<<Exports>>=
get-modlisp-header
@

\noindent Make it easy to get some header.

<<Utilities>>=
(define (get-modlisp-header packet key . default)
  (let ([res (assq key (modlisp-packet-headers packet))])
    (if res (cdr res) (and (not (null? default)) (car default)))))

@

\procsig{[[get-modlisp-parameter]]}{\var{parameter} \var{packet}}{\var{parameter value}}

<<Exports>>=
get-modlisp-parameter
@

\noindent Makes it easy to get a parameter from a modlisp packet.

<<Utilities>>=
(define (get-modlisp-parameter key packet)
  (let ([url (get-modlisp-header packet 'url #f)])
    (and url 
      (let ([res (assq key (query-string->parameters (or (uri-query url) "")))])
        (and res (cadr res))))))

@

<<Imports>>=
(arcfide query-strings)
@

\procsig{[[make-html-response]]}{\var{body}}{\var{Response Packet}}

<<Exports>>=
make-html-response
@

\noindent Making an HTML response of some kind is very popular, so 
it makes sense to make this as easy as possible. 

<<Utilities>>=
(define (make-html-response body)
  (make-modlisp-packet '((content-type . "text/html") (status . "200 OK")) body))

@

\procsig{[[make-typed-response]]}{\var{mime-type} \var{contents}}{\var{packet}}

<<Exports>>=
make-typed-response
@

\noindent Allows for easy responses for arbitrary mime-types without 
any special requirements.

<<Utilities>>=
(define (make-typed-response type contents)
  (make-modlisp-packet
    `((content-type . ,(mime-type->string type)) (status . "200 OK"))
    contents))

@

\procsig{[[make-500-response]]}{}{}

<<Exports>>=
make-500-response
@

<<Utilities>>=
(define (make-500-response)
  (make-html-response
    "<html><head><title>500 Internal Server Error</title></head>
<body><h1>500</h1><h2>Internal Server Error</h2>
<p>A problem occured with your request. Please contact 
the administrator about this problem.</p></body></html>"))

@

\procsig{[[make-404-response]]}{}{}

<<Exports>>=
make-404-response
@

<<Utilities>>=
(define (make-404-response) (handle-404 #f))

@

\chapter{R6RS Form}

<<modlisp.sls>>=
<<License>>

(library (arcfide modlisp)
  (export
    <<Exports>>)
  (import
    <<Imports>>)

<<Datatypes>>

<<Utilities>>

<<Server>>

<<MIME Registration>>

)
@

\chapter{License}

<<License>>=
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Mod_lisp for Scheme
;;; Version: 1 Alpha
;;; 
;;; Copyright (c) 2009 Aaron W. Hsu <arcfide@sacrideo.us>
;;; 
;;; Permission to use, copy, modify, and distribute this software for
;;; any purpose with or without fee is hereby granted, provided that the
;;; above copyright notice and this permission notice appear in all
;;; copies.
;;; 
;;; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
;;; WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
;;; WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
;;; AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
;;; DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
;;; OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
;;; TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
;;; PERFORMANCE OF THIS SOFTWARE.
@
