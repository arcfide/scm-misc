\title {Foreign Value Binding Constructs}

\chapter{Introduction}

This library provides binding constructs designed to generate  foreign
code and obtain results from them without forcing  the user to write
their own stub files or compiling them  outside of compiling the scheme
file. 

\chapter{Binding Foreign Values}

<<Exports>>=
define-foreign-values
@

\procsig{[[define-foreign-constants]]}
  {(\var{shared-object-path} \var{get-proc-name} \var{type}) 
    \var{binding} \ldots} 
  {}

\noindent \var{shared-object-path} should be the path to the shared
object file that contains the \var{get-proc-name} function.
\var{get-proc-name} and \var{shared-object-path} must both be literal
strings. \var{type} should be a valid foreign type. The set of
\var{binding} names should be identifiers.

Each identifier is bound to the result of applying the get-proc-name to
the string representation of the symbol. The shared object is loaded at
compile time, and the getter function is only defined at compile-time,
so it is not necessary to include the shared object with the compiled
code object.

<<Binding Constructs>>=
(meta define (resolve name)
  (let loop ([dirs (source-directories)])
    (cond
      [(not (pair? dirs))
       name]
      [(let ([path (format "~a~a~a" 
                           (car dirs) 
                           (directory-separator)
                           name)])
         (and (file-exists? path) path))]
      [else (loop (cdr dirs))])))

(define-syntax define-foreign-values
  (lambda (x)
    (syntax-case x ()
      [(_ shared-object (conv proc-name) type bindings ...)
       (and (identifier? #'conv)
            (memq (syntax->datum #'conv) '(__cdecl __stdcall __com))
            (string? (syntax->datum #'shared-object))
            (string? (syntax->datum #'proc-name))
            (for-all identifier? #'(type bindings ...)))
       #'(begin
           (meta define %get-ffi-value
             (begin (load-shared-object (resolve shared-object))
               (foreign-procedure conv proc-name (string) type)))
           (define-syntax get-ffi-value
             (lambda (x)
               (syntax-case x ()
                 [(k name)
                  (identifier? #'name)
                  #`'#,(datum->syntax #'k
                         (%get-ffi-value 
                           (symbol->string 
                             (syntax->datum #'name))))])))
           (define-bindings get-ffi-value bindings ...))]
      [(_ shared-object proc-name type bindings ...)
       (and (string? (syntax->datum #'shared-object))
            (string? (syntax->datum #'proc-name))
            (for-all identifier? #'(type bindings ...)))
       #'(begin
           (meta define %get-ffi-value
             (begin (load-shared-object (resolve shared-object))
               (foreign-procedure proc-name (string) type)))
           (define-syntax get-ffi-value
             (lambda (x)
               (syntax-case x ()
                 [(k name)
                  (identifier? #'name)
                  #`'#,(datum->syntax #'k
                         (%get-ffi-value 
                           (symbol->string 
                             (syntax->datum #'name))))])))
           (define-bindings get-ffi-value bindings ...))])))

(define-syntax define-bindings
  (syntax-rules ()
    [(_ get) (begin)]
    [(_ get binding) (define binding (get binding))]
    [(_ get binding rest ...)
     (begin (define binding (get binding))
       (define-bindings get rest ...))]))
@
                              
\chapter{Files}{}%

<<ffi-bind.ss>>=
<<License>>

(module arcfide/ffi-bind
  (define-foreign-values)
  (import (chezscheme))
  
<<Binding Constructs>>

)
@

<<ffi-bind.sls>>=
<<License>>

(library (arcfide ffi-bind)
  (export define-foreign-values)
  (import (chezscheme))

<<Binding Constructs>>

)
@

\chapter{Licensing}

<<License>>=
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Foreign Value Binding Constructs
;;; Version 2.0
;;; 
;;; Copyright (c) 2009 Aaron W. Hsu <arcfide@sacrideo.us>
;;; 
;;; Permission to use, copy, modify, and distribute this software for
;;; any purpose with or without fee is hereby granted, provided that the
;;; above copyright notice and this permission notice appear in all
;;; copies.
;;; 
;;; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
;;; WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
;;; WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
;;; AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
;;; DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
;;; OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
;;; TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
;;; PERFORMANCE OF THIS SOFTWARE.
@
