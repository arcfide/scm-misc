\title{Parameterized Modules}

\chapter{Introduction}%
Chez Scheme's module system is largely syntactic. This permits some interesting extensions 
of the standard module form in order to achieve some of the features that other Scheme's 
have built in to their module systems. Chez's use of syntactic modules permits a wide 
range of extensions that may not be possible for module systems that do not exist as a 
part of the language itself, or are not malleable. 

One such commnonly desired feature is the ability to parameterize parts of the module 
form so that you can declare the same module with different internals. This library provides
a simple method for doing this. It introduces a form [[module/parameterized]] to permit
altering a set of expressions in the module form when the module is declared/imported.

\chapter{Usage}%

\verbatim
(module/parameterize <name> (<export> ...) <body> ...)
|endverbatim

\noindent Here [[<export> ...]] and [[<body> ...]] correspond to their same use in 
the normal Chez Scheme [[module]] form.

The above form defines a syntax [[<name>]] which, when expanded in any code, 
evaluates to a [[module]] form in the same scope as the form occurs, with the 
values of [[<param> ...]] replaced with their associated expressions. The [[<name>]] 
form expects to be used according to the following syntax:

\verbatim
(<name> <module name> (<param> ...) <pbody> ...)
|endverbatim

\noindent which makes [[<param> ...]] visible in the original module, whose 
bindings must exist in [[<body> ...]].

This has the effect of doing something like this:

\medskip\verbatim
(module <module name> (<export> ...)
	(module (<param> ...)
		<pbody> ...)
	<body> ...)
|endverbatim
\medskip

\chapter{Implementation}%

Because the body is introduced at a different time and place from the parameter 
body, we must re-wrap the parameter body definitions in the correct wraps after 
we have exported them. This leads to the following general expansion template, 
for which we create a helper macro.

\medskip\verbatim
(module (new-export ...)
	(module (temp ...)
		definitions ...
		(define temp old-export) ...)
	(define new-export temp) ...)
|endverbatim
\medskip

<<Parameterized Modules>>=
(trace-define-syntax rewrap-identifiers
	(syntax-rules ()
		[(_ old new (bindings ...) defs ...)
			(with-syntax (
					[(temp (... ...)) (generate-temporaries #'(bindings ...))]
					[(ob (... ...)) (with-implicit (old bindings ...) #'(bindings ...))]
					[(nb (... ...)) (with-implicit (new bindings ...) #'(bindings ...))])
				#'(module (nb (... ...))
					(module (temp (... ...))
						defs ... (define temp ob) (... ...))
					(define nb temp) (... ...)))]))

@

\noindent 
And we use this to rewrap the identifiers for our definitions, which must go 
from the original declaration to the call site, and the parameter definitions, 
which must go from their call site to the definitions original wrapping.

<<Template>>=
(rewrap-identifiers name module-name (export ...)
	(rewrap-identifiers module-name name (param ...)
		pbody (... ...))
	body ...)
@

\noindent We can then easily define the rest of the syntax.

<<Parameterized Modules>>=
(define-syntax module/parameterized
	(syntax-rules ()
		[(_ name (export ...) (param ...) body ...)
			(trace-define-syntax name
				(lambda (x)
					(syntax-case x ()
						[(_ module-name pbody (... ...))
							(with-implicit (module-name export ...)
								#`(module module-name (export ...) #,<<Template>>))])))]))
@

\chapter{R6RS Form}

<<parameterized-modules.sls>>=
<<License>>

(library (arcfide parameterized-modules)
	(export module/parameterized)
	(import (chezscheme))

<<Parameterized Modules>>

)
@

\chapter{Vanilla Form}

<<parameterized-modules.scm>>=
<<License>>

<<Parameterized Modules>>
@

\chapter{License}

<<License>>=
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Parameterized Modules for Chez
;;; Version: 1.0.0
;;; 
;;; Copyright (c) 2009 Aaron W. Hsu <arcfide@sacrideo.us>
;;; 
;;; Permission to use, copy, modify, and distribute this software for
;;; any purpose with or without fee is hereby granted, provided that the
;;; above copyright notice and this permission notice appear in all
;;; copies.
;;; 
;;; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
;;; WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
;;; WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
;;; AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
;;; DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
;;; OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
;;; TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
;;; PERFORMANCE OF THIS SOFTWARE.
@